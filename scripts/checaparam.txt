DECLARE
    CURSOR c_saida IS 
      SELECT saida.*
      FROM mvintegra.imv_configuracao_saida saida
      INNER JOIN mvintegra.imv_configuracao_saida_tp_doc tp_doc ON saida.cd_imv_configuracao_saida = tp_doc.cd_imv_configuracao_saida
      WHERE tp_doc.tp_documento IN ('LOTE_RPS_ENVIO', 'LOTE_RPS_CONSULTA', 'CANCELAMENTO_RPS')
      ORDER BY saida.cd_empresa_destino;

    CURSOR c_parametros(cd_saida NUMBER) IS 
      SELECT * FROM mvintegra.imv_configuracao_saida_param WHERE cd_imv_configuracao_saida = cd_saida;

    TYPE Array_Parametros_Base IS TABLE OF VARCHAR2(70); 
     array_parametros Array_Parametros_Base := Array_Parametros_Base(
    'diretorio', 'diretorioPROC', 'url', 'contentType', 'soapActionUri', 'codificacaoMensagem', 'elementoResposta', 'elementoProtocolo', 'elementoProtocoloCancelamento', 'elementoMensagem',
    'elementoChaveacesso', 'elementoNumeroNFSE', 'elementoAssinatura', 'elementoAssinaturaRaiz', 'elementoEscape', 'elementoUnescape', 'elementoCdata', 'respostaPendente', 'respostaSucesso',
    'identificadorCancelarPorEnvio', 'respostaLinkNfe', 'arquivoCertificado', 'senhaCertificado', 'tipoCertificado', 'portaProxy', 'ipProxy', 'usuarioProxy', 'senhaProxy', 'tipoNotaFiscal', 
    'jsonConexaoA3', 'tipoUri', 'assinaturaComComments', 'assinaturaComSubJect', 'assinaturaComKeyValue', 'javaHome', 'host', 'incluirTagTransformacaoNaTagReferenciaDaAssinaturaDigital',
    'tagTransformacaoNaTagReferenciaDaAssinaturaDigitalComments', 'incluirTagXPathNaTagTransformacaoDaAssinaturaDigital', 'tagXPath2', 'qtTentativasConexao', 'tempoReenvio', 'elementoComplementoNFSE',
    'idNFC', 'chaveNFC', 'elementoSalvarXML', 'tpSSL', 'urlToken', 'uriActionToken', 'tagTokenResposta', 'xmlToken', 'tagMensagemErroValidacao', 'elementoProtocoloCartaC', 'elementoDtCartaC', 'elementoProtocoloInut', 
    'elementoDtInut', 'tempoDeVidaTokenEmSegundos','tokenUsuario','tokenSenha'  );

    v_titulo NUMBER := 0;
BEGIN 
  FOR saida_i IN c_saida LOOP
    FOR param_i IN c_parametros(saida_i.cd_imv_configuracao_saida) LOOP
      IF param_i.nm_parametro NOT MEMBER OF array_parametros THEN
        v_titulo := v_titulo + 1; 
        IF v_titulo = 1 THEN
            DBMS_OUTPUT.PUT_LINE('--------------------------- PARAMETROS INVALIDOS ---------------------------');
        END IF;

        DECLARE
            max_similarity NUMBER := 0;
            most_similar_string VARCHAR2(70);
        BEGIN
          FOR i IN 1..array_parametros.COUNT LOOP
            DECLARE
                similarity NUMBER;
            BEGIN
                similarity := UTL_MATCH.JARO_WINKLER_SIMILARITY(param_i.nm_parametro, array_parametros(i));
                IF similarity > max_similarity THEN
                    max_similarity := similarity;
                    most_similar_string := array_parametros(i);
                END IF;
            END;
          END LOOP;

          IF max_similarity > 85 then
            DBMS_OUTPUT.PUT_LINE('Empresa ' || saida_i.cd_empresa_destino || ', ' || saida_i.ds_saida || ', parametro ---> [' || param_i.nm_parametro || '] está incorreto. Parametro VALIDO MAIS SEMELHANTE é : [' || most_similar_string || '] ' || max_similarity || '%' );
          else
             DBMS_OUTPUT.PUT_LINE('Empresa ' || saida_i.cd_empresa_destino || ', ' || saida_i.ds_saida || ', parametro ---> [' || param_i.nm_parametro || '] está incorreto. Não há uma parâmetro válido parecido com este.' );         
          END IF;            
        END;
      END IF;
    END LOOP;
  END LOOP;

  IF v_titulo = 0 THEN 
         Dbms_Output.Put_Line('-------------------- Todos os parâmetros estão CORRETOS --------------------');
  END IF;
END;
